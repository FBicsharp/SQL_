--ANALIZE TABLE INDEX USEAGE

DECLARE @Table NVARCHAR(128) = 'dbo.table';


SELECT 
-- Classificazione indice
    CASE 
        WHEN (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) = 0 THEN 'UNUSED'
        WHEN ISNULL(s.user_updates, 0) > (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) * 5 THEN 'HIGH_MAINTENANCE'
        WHEN (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) > 1000 THEN 'VERY_ACTIVE'
        WHEN (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) > 100 THEN 'ACTIVE'
        ELSE 'LOW_USAGE'
    END AS IndexStatus,
    -- Dimensione indice
    CAST(ps.avg_record_size_in_bytes AS INT) AS AvgRecordSize,
    ps.record_count AS RecordCount,
    CAST((ps.avg_record_size_in_bytes * ps.record_count) / 1024.0 / 1024.0 AS DECIMAL(10,2)) AS IndexSizeMB,
    OBJECT_NAME(i.object_id) AS TableName,
    i.name AS IndexName,
    i.type_desc AS IndexType,
    -- Statistiche di utilizzo per lettura
    ISNULL(s.user_seeks, 0) AS UserSeeks,
    ISNULL(s.user_scans, 0) AS UserScans, 
    ISNULL(s.user_lookups, 0) AS UserLookups,
    -- Statistiche di utilizzo per scrittura
    ISNULL(s.user_updates, 0) AS UserUpdates,
    -- Date ultimo utilizzo
    s.last_user_seek,
    s.last_user_scan,
    s.last_user_lookup,
    s.last_user_update,
    -- Calcoli derivati
    (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) AS TotalReads,
    -- Rapporto letture/scritture
    CASE 
        WHEN ISNULL(s.user_updates, 0) = 0 THEN 'NO_WRITES'
        WHEN (ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) = 0 THEN 'WRITE_ONLY'
        ELSE CAST(ROUND(
            CAST((ISNULL(s.user_seeks, 0) + ISNULL(s.user_scans, 0) + ISNULL(s.user_lookups, 0)) AS FLOAT) / 
            CAST(ISNULL(s.user_updates, 0) AS FLOAT), 2) AS VARCHAR(10))
    END AS ReadWriteRatio
    
FROM sys.indexes i
LEFT JOIN sys.dm_db_index_usage_stats s ON i.object_id = s.object_id AND i.index_id = s.index_id AND s.database_id = DB_ID()
LEFT JOIN sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, 'SAMPLED') ps ON i.object_id = ps.object_id AND i.index_id = ps.index_id
WHERE i.object_id = OBJECT_ID(@Table)
    AND i.type_desc = 'NONCLUSTERED'
    AND i.is_disabled = 0
ORDER BY TotalReads DESC, UserUpdates DESC;
